import"./DsnmJJEf.js";import{w as O,h as x,a as j,K as M,aN as E,f as S,a3 as L,ah as B,ay as W,am as z,aw as R,z as H,aO as K,ak as h,g as U,i as G,j as Y,k as T,l as V,m as b,n as J,o as I,u as D,r as c,q as l,t as i}from"./CaBH6Iz7.js";import{s as Q,r as X}from"./oW7ZNcUw.js";import{I as Z}from"./B6vH-BbK.js";function u(t,n,s=!1,e=!1,m=!1){var p=t,o="";O(()=>{var r=M;if(o===(o=n()??"")){x&&j();return}if(r.nodes_start!==null&&(E(r.nodes_start,r.nodes_end),r.nodes_start=r.nodes_end=null),o!==""){if(x){S.data;for(var a=j(),g=a;a!==null&&(a.nodeType!==L||a.data!=="");)g=a,a=B(a);if(a===null)throw W(),z;R(S,g),p=H(a);return}var k=o+"";s?k=`<svg>${k}</svg>`:e&&(k=`<math>${k}</math>`);var d=K(k);if((s||e)&&(d=h(d)),R(h(d),d.lastChild),s||e)for(;h(d);)p.before(h(d));else p.before(d)}})}function rn(t,n){U(n,!0);/**
 * @license @lucide/svelte v0.545.0 - ISC
 *
 * ISC License
 *
 * Copyright (c) for portions of Lucide are held by Cole Bemis 2013-2023 as part of Feather (MIT). All other copyright (c) for Lucide are held by Lucide Contributors 2025.
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 *
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * ---
 *
 * The MIT License (MIT) (for portions derived from Feather)
 *
 * Copyright (c) 2013-2023 Cole Bemis
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *
 */let s=X(n,["$$slots","$$events","$$legacy"]);const e=[["path",{d:"M12 6v6l4 2"}],["circle",{cx:"12",cy:"12",r:"10"}]];Z(t,Q({name:"clock"},()=>s,{get iconNode(){return e},children:(m,p)=>{var o=Y(),r=T(o);V(r,()=>n.children??J),b(m,o)},$$slots:{default:!0}})),G()}const C={title:"When React's Future Feels Like Next.js' Shadow",excerpt:"Exploring the complex relationship between React's evolution, Server Components, and the growing influence of Next.js on the React ecosystem.",author:"Rifky Adni Putra",date:"2025-10-16",readTime:"8 min read",tags:["React","Next.js","Server Components","web development","framework"],featured:!0,slug:"react-future-nextjs-shadow"},{title:kn,excerpt:dn,author:mn,date:gn,readTime:hn,tags:fn,featured:vn,slug:yn}=C;var nn=I('<p>I’ve been watching React evolve for years now—through hooks, Suspense, concurrency, server actions—and there’s one pattern that keeps drawing attention: Server Components (RSCs). They’re ambitious, seductive. Less JavaScript, faster load times, closer coupling between data and view. But as I map that promise against reality, I can’t help but feel uneasy. Especially when so much of the momentum behind server components is riding on Next.js and Vercel.</p> <h2>Why Next.js & Vercel Matter More Than We Admit</h2> <p>Next.js isn’t just “another React framework” — today, it’s the way many developers experience React in production. It shapes how tutorials, libraries, and discourse talk about React. When the React core team rolls out a new feature, Next.js tends to adopt (or tailor) it first. That means Next often sits between the React vision and how we use it in real life.</p> <p>Vercel, as both steward of Next.js and a cloud platform, has a natural alignment with server rendering, edge functions, server actions, and anything that leverages their hosting model. The result: many of React’s new directions happen in tandem with Next.js’ needs, not in isolation.</p> <p>That’s not conspiracy — it’s influence. And it matters, because while Next.js is powerful, its priorities (server-first, edge, streaming) don’t match every app or team.</p> <h2>The Catch with Server Components in the Wild</h2> <p>I believe server components will be useful tools in many apps. But making them the default path is risky. Here’s where theory clashes with practice:</p> <h3>Mixed Mental Models</h3> <p>Now developers have to decide: is this component “server” or “client”? That choice carries restrictions (no effects, no browser APIs) and often forces splitting logic in awkward ways.</p> <h3>Lock-in Risks</h3> <p>Patterns designed around Next.js expectations—its fetch caching, file conventions, routing semantics—don’t always travel well to custom setups or other frameworks.</p> <h3>Tooling Friction</h3> <p>Debugging boundary errors, serialization bugs, hydration mismatches—these are tricky even in Next/React teams. Expect that pain to scale worse in less constrained setups.</p> <h3>Performance Illusions</h3> <p>Some early benchmarks make server components seem magical, but real apps often show diminishing returns. The cost of round-trips, partial hydration, or redundant data fetching can erode the gains.</p> <h3>Adoption Inertia</h3> <p>Big codebases, established teams, and existing libraries won’t rewrite themselves overnight. Many teams will stay on client-heavy or classic SSR hybrids for years.</p> <h2>What I Think React’s Future Actually Looks Like</h2> <p>If I had to forecast, here’s how I see it:</p> <h3>Hybrid Becomes Default</h3> <p>Developers will blend server and client intelligently—server where it helps, client where interactivity demands it.</p> <h3>Smarter Hydration & Modular Rendering</h3> <p>Think along the lines of “islands” or “adaptive hydration” (as some early research suggests). The goal isn’t to eliminate client-side JavaScript, but to load it more strategically.</p> <h3>Framework-Agnostic Features</h3> <p>React features will aim to support Next.js, but also Remix, Astro, or even raw React setups. The ecosystem is too diverse for one framework to dictate everything.</p> <h3>Opt-in Server Components</h3> <p>Use them where they make sense (marketing pages, dashboards, data-rich but lightly interactive), not as a blanket rule.</p> <h2>The Bigger Picture</h2> <p>React’s evolution isn’t happening in a vacuum. The web platform itself is changing—with better caching, streaming, edge computing, and native modules. React server components are one response to these changes, but they’re not the only one.</p> <p>Other frameworks are exploring different approaches:</p> <ul><li><strong>SvelteKit</strong> with its load functions and server-side logic</li> <li><strong>Astro</strong> with its island architecture</li> <li><strong>Solid</strong> with its fine-grained reactivity</li></ul> <p>Each offers different trade-offs and mental models. React’s bet on server components is significant, but it’s not guaranteed to be the winning approach for every use case.</p> <h2>Moving Forward Thoughtfully</h2> <p>As developers, we should:</p> <ol><li><strong>Evaluate server components critically</strong> — not just accept them because they’re new</li> <li><strong>Consider our specific use cases</strong> — what works for Vercel’s platform might not work for your infrastructure</li> <li><strong>Keep learning alternatives</strong> — the React ecosystem is vast, and Next.js is just one part of it</li> <li><strong>Focus on fundamentals</strong> — good architecture, performance, and user experience matter more than any specific technology</li></ol> <p>React’s future is still being written. While Next.js and Vercel have significant influence, the broader community of developers, library authors, and framework creators will ultimately shape where we go next.</p> <p>The key is staying curious, staying critical, and remembering that every tool—including server components—is just that: a tool. Use it when it fits, but don’t let it define your entire approach to building for the web.</p> <hr/> <p><em>What are your thoughts on React Server Components and the influence of Next.js on React’s direction? I’d love to hear your perspective on <a href="https://twitter.com/0xrkyy" rel="nofollow">Twitter</a> or via <a href="mailto:rifkyadp@gmail.com">email</a>.</em></p>',1);function sn(t){var n=nn();D(76),b(t,n)}const an=Object.freeze(Object.defineProperty({__proto__:null,default:sn,metadata:C},Symbol.toStringTag,{value:"Module"})),F={title:"Getting Started with SvelteKit Remote Functions",excerpt:"How SvelteKit's Remote Functions let you write type-safe server logic and call it directly from your components.",author:"Rifky Adni Putra",date:"2025-10-16",readTime:"7 min read",tags:["SvelteKit","remote functions","web development","RPC"],featured:!1,slug:"sveltekit-remote-functions-guide"},{title:wn,excerpt:bn,author:_n,date:xn,readTime:jn,tags:Sn,featured:Rn,slug:Tn}=F;var tn=I('<p>SvelteKit has introduced <strong>Remote Functions</strong> — an experimental feature aiming to streamline how you write server logic and call it safely from your components. In effect, it gives you an RPC-style paradigm, but with full type safety and automatic fetch wrapping. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <h2>Why Remote Functions?</h2> <p>Traditionally, SvelteKit’s data fetching and mutations rely on:</p> <ul><li><code>load</code> / <code>+page.server.js</code> / <code>+layout.server.js</code> for server-side data loading (<a href="https://svelte.dev/docs/kit/load?utm_source=chatgpt.com" title="Loading data • Docs - Svelte" rel="nofollow">svelte.dev</a>)</li> <li>Endpoint files (e.g. <code>+server.ts</code>) or actions for mutations</li> <li><code>fetch</code> calls from client-side or through <code>load</code> functions</li></ul> <p>While this works, it can sometimes feel disjointed:</p> <ul><li>You may have to jump between endpoints and component code</li> <li>Type safety of client ↔ server communication can be weak</li> <li>Co-location is limited: logic tied to UI components may feel separate</li></ul> <p>Remote Functions aim to fix that. You write server-only logic in <code>.remote.ts</code> (or <code>.remote.js</code>) files, and import them in your Svelte components. On the server, they run directly; on the client, they compile to <code>fetch</code> wrappers under the hood. (<a href="https://github.com/sveltejs/kit/discussions/13897?utm_source=chatgpt.com" title="Remote Functions · sveltejs kit · Discussion #13897 - GitHub" rel="nofollow">GitHub</a>)</p> <p>They also provide type-safe serialization of arguments (via devalue) and runtime validation if you opt in with a schema.</p> <p>In Svelte’s docs:</p> <blockquote><p>Remote functions are a tool for type-safe communication between client and server. They can be called anywhere in your app, but always run on the server. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p></blockquote> <p>The feature is experimental, so you have to explicitly enable it. (<a href="https://github.com/sveltejs/kit/discussions/13897?utm_source=chatgpt.com" title="Remote Functions · sveltejs kit · Discussion #13897 - GitHub" rel="nofollow">GitHub</a>)</p> <hr/> <h2>Enabling Remote Functions</h2> <p>To opt into this experimental feature, you need to adjust your SvelteKit configuration:</p> <pre class="language-js"><!></pre> <ul><li><code>kit.experimental.remoteFunctions = true</code> turns on remote functions support. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</li> <li><code>compilerOptions.experimental.async = true</code> allows you to use <code>await</code> at the top level inside Svelte components (needed for <code>await remoteQuery()</code>) (<a href="https://github.com/sveltejs/kit/discussions/13897?utm_source=chatgpt.com" title="Remote Functions · sveltejs kit · Discussion #13897 - GitHub" rel="nofollow">GitHub</a>)</li></ul> <p>Once enabled, you can create files with suffix <code>.remote.ts</code> (or <code>.remote.js</code>) anywhere in your <code>src</code> (or routes) folder. The functions you export from them become your “remote” functions.</p> <hr/> <h2>The Four Flavors of Remote Functions</h2> <p>Remote functions come in four types:</p> <ol><li><strong>query</strong> — for fetching data (read)</li> <li><strong>command</strong> — for server-side mutations (writes)</li> <li><strong>form</strong> — for form handling (like actions, but built-in)</li> <li><strong>prerender</strong> — for build-time data logic</li></ol> <p>Let’s dive into each.</p> <h3><code>query</code></h3> <p>A <code>query</code> is a function meant to fetch data. Its signature usually looks like:</p> <pre class="language-ts"><!></pre> <p>You can also provide input validation:</p> <pre class="language-ts"><!></pre> <p>On the client side (inside a Svelte component), you can do:</p> <pre class="language-svelte"><!></pre> <p>Under the hood, SvelteKit generates a <code>fetch</code> wrapper for <code>getPosts</code> when used in the client. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <p><code>query</code> also supports <code>batch</code> mode, where multiple calls can be aggregated in a single request. (<a href="https://svelte.dev/docs/kit/%24app-server?utm_source=chatgpt.com" title="$app/server • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <p>You can also manage loading/error states more explicitly:</p> <pre class="language-svelte"><!></pre> <p>You can also call <code>q.refresh()</code> to re-fetch. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <h3><code>command</code></h3> <p><code>command</code> is for mutations or actions (server side). It wraps server-side logic that changes state:</p> <pre class="language-ts"><!></pre> <p>On the client, invoking <code>addLike(postId)</code> results in a remote call. You can also chain <code>updates(...)</code> to trigger query invalidations or optimistic updates. (<a href="https://svelte.dev/docs/kit/%40sveltejs-kit?utm_source=chatgpt.com" title="@sveltejs/kit • Docs • Svelte" rel="nofollow">svelte.dev</a>)</p> <h3><code>form</code></h3> <p><code>form</code> is particularly suited for form submissions. It produces an object you can spread onto a <code>&lt;form&gt;</code> element in your Svelte component:</p> <pre class="language-ts"><!></pre> <p>In your component:</p> <pre class="language-svelte"><!></pre> <p>It also supports <code>enhance(...)</code> for custom handling or optimistic updates. (<a href="https://svelte.dev/docs/kit/%40sveltejs-kit?utm_source=chatgpt.com" title="@sveltejs/kit • Docs • Svelte" rel="nofollow">svelte.dev</a>)</p> <h3><code>prerender</code></h3> <p>This is for build-time logic: you can compute values at build time (during prerender) that your components can use. It’s less commonly needed in dynamic apps but useful for static parts. (<a href="https://svelte.dev/docs/kit/%24app-server?utm_source=chatgpt.com" title="$app/server • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <hr/> <h2>Example: A Simple Todos App</h2> <p>Let’s sketch a minimal example using <code>query</code> + <code>command</code>.</p> <p><strong>File <code>todos.remote.ts</code></strong></p> <pre class="language-ts"><!></pre> <p><strong>In your Svelte component, e.g. <code>+page.svelte</code></strong></p> <pre class="language-svelte"><!></pre> <p>Note how we can call server methods (<code>addTodo</code>, <code>toggleTodo</code>) directly from the component without writing a separate API route. The <code>.updates(getTodos())</code> tells SvelteKit: after this command completes, refresh that query (or apply an optimistic update). (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <hr/> <h2>Best Practices & Gotchas</h2> <h3>✅ Use validation schemas</h3> <p>If your remote function expects input, validate it via a schema (e.g. <code>zod</code>) so malformed input is caught early. Without validation, everything is “unchecked.”</p> <h3>✅ Co-locate logic near usage</h3> <p>One of the biggest strengths: keep remote logic close to your UI so you don’t have to jump across directories.</p> <h3>✅ Be cautious with heavy logic</h3> <p>A remote function runs on the server and might block or slow down performance. Avoid putting very heavy tasks that should be delegated elsewhere.</p> <h3>✅ Understand SSR / hydration behavior</h3> <p>Because remote functions always run on server, even during SSR/hydration, they need to work without depending on browser globals. Also, if you call a query during SSR, SvelteKit may inline its result in HTML so it isn’t refetched on hydration. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <h3>⚠️ Experimental, API may change</h3> <p>Remote Functions is still experimental as of 2025; expect changes. (<a href="https://svelte.dev/docs/kit/remote-functions?utm_source=chatgpt.com" title="Remote functions • Docs - Svelte" rel="nofollow">svelte.dev</a>)</p> <h3>⚠️ Don’t leak secrets accidentally</h3> <p>Because the client import is compiled to a fetch wrapper, you should never place secrets or environment variables in a <code>.remote.ts</code> function. But as always, be mindful of what your functions can access.</p> <hr/> <h2>What Remote Functions Solve (and What They Don’t)</h2> <h3>Pros</h3> <ul><li><strong>Colocation</strong>: logic lives next to UI</li> <li><strong>Type safety</strong>: client and server share types</li> <li><strong>Cleaner API calls</strong>: you don’t need to manually write endpoints and fetch calls</li> <li><strong>Automatic serialization and caching</strong></li> <li><strong>Optimistic updates and query invalidation built in</strong></li></ul> <h3>Limitations / things to watch</h3> <ul><li>Sometimes <code>load</code> is still more appropriate, especially when wanting to bundle multiple data fetches for a page</li> <li>Not a full replacement for API-only backends (if you have a completely separate backend, bridging may need extra glue)</li> <li>Because it’s experimental, behavior might shift</li> <li>Current limitations in SSR / hydration edge cases</li></ul> <p>As one commenter put it:</p> <blockquote><p>“I was sick of setting up +server.js just to run one DB query. Can’t wait to delete half my API routes.” (<a href="https://www.reddit.com/r/sveltejs/comments/1ldv5cr/new_sveltekit_concept_remote_functions/?utm_source=chatgpt.com" title="New SvelteKit concept: Remote functions : r/sveltejs - Reddit" rel="nofollow">Reddit</a>)</p></blockquote> <p>Remote Functions don’t necessarily remove <code>load</code> functions entirely — they complement them. For example, <code>load</code> works at the page-level, bundling multiple data needs together, while remote functions give you more granular control.</p> <h2>Conclusion & What’s Next</h2> <p>SvelteKit’s Remote Functions open a new paradigm: writing server logic that feels like local functions, with type safety and automatic fetch plumbing. For many apps, this will reduce boilerplate and bring code much closer to UI.</p> <p>As this feature matures, I expect:</p> <ul><li>Better tooling (IDE support, debugging)</li> <li>Wider adoption of batching or automatic deduplication</li> <li>More patterns and best practices emerging</li></ul> <p>If you’re trying it today, treat it as experimental but powerful.</p> <p>Want more examples or a deeper dive into <code>form.enhance</code>, query batching, or handling file uploads via Remote Functions? Let me know — I’d be happy to expand with real-world demos.</p>',1);function en(t){var n=tn(),s=c(T(n),28),e=l(s);u(e,()=>`<code class="language-js"><span class="token comment">// svelte.config.js</span>
<span class="token comment">/** @type &#123;import('@sveltejs/kit').Config&#125; */</span>
<span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  <span class="token literal-property property">kit</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">remoteFunctions</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">compilerOptions</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">experimental</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
      <span class="token literal-property property">async</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> config<span class="token punctuation">;</span></code>`),i(s);var m=c(s,20),p=l(m);u(p,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> query <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/server'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getPosts <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token comment">// server logic: fetch from DB, external API, etc.</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetchSomePosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),i(m);var o=c(m,4),r=l(o);u(r,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> query <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/server'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> z <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'zod'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getUser <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>userId<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token function">fetchUserById</span><span class="token punctuation">(</span>userId<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),i(o);var a=c(o,4),g=l(a);u(g,()=>`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getPosts <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./posts.remote'</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">posts </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span></code>`),i(a);var k=c(a,8),d=l(k);u(d,()=>`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getPosts <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./posts.remote'</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> q <span class="token operator">=</span> <span class="token function">getPosts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// now q has &#96;loading&#96;, &#96;error&#96;, &#96;current&#96;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> q<span class="token punctuation">.</span>error<span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Error: <span class="token language-javascript"><span class="token punctuation">&#123;</span>q<span class="token punctuation">.</span>error<span class="token punctuation">.</span>message<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> q<span class="token punctuation">.</span>loading<span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Loading...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
    <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">q<span class="token punctuation">.</span>current </span><span class="token keyword">as</span> <span class="token language-javascript">post<span class="token punctuation">&#125;</span></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token language-javascript"><span class="token punctuation">&#123;</span>post<span class="token punctuation">.</span>title<span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
    <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>`),i(k);var f=c(k,8),q=l(f);u(q,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> command <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/server'</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> addLike <span class="token operator">=</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>postId<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">await</span> <span class="token function">incrementLikesInDatabase</span><span class="token punctuation">(</span>postId<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),i(f);var v=c(f,8),A=l(v);u(A,()=>`<code class="language-ts"><span class="token comment">// comments.remote.ts</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> form <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/server'</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">&#123;</span> z <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'zod'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> commentSchema <span class="token operator">=</span> z<span class="token punctuation">.</span><span class="token function">object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  postId<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  content<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> addComment <span class="token operator">=</span> <span class="token function">form</span><span class="token punctuation">(</span>commentSchema<span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>data<span class="token punctuation">,</span> invalid<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>invalid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> errors<span class="token operator">:</span> invalid <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">await</span> <span class="token function">createComment</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>postId<span class="token punctuation">,</span> data<span class="token punctuation">.</span>content<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),i(v);var y=c(v,4),N=l(y);u(N,()=>`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> addComment <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./comments.remote'</span><span class="token punctuation">;</span>

  <span class="token keyword">let</span> result<span class="token punctuation">;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">...</span>addComment<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>postId<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">value=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>postId<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

<span class="token language-javascript"><span class="token punctuation">&#123;</span>#<span class="token keyword">if</span> addComment<span class="token punctuation">.</span>result<span class="token operator">?.</span>success<span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Comment added!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">:</span><span class="token keyword">else</span> <span class="token keyword">if</span> addComment<span class="token punctuation">.</span>result<span class="token operator">?.</span>errors<span class="token punctuation">&#125;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Errors: <span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>addComment<span class="token punctuation">.</span>result<span class="token punctuation">.</span>errors<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token operator">/</span><span class="token keyword">if</span><span class="token punctuation">&#125;</span></span></code>`),i(y);var w=c(y,16),P=l(w);u(P,()=>`<code class="language-ts"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> query<span class="token punctuation">,</span> command <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'$app/server'</span><span class="token punctuation">;</span>

<span class="token keyword">interface</span> <span class="token class-name">Todo</span> <span class="token punctuation">&#123;</span>
  id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  done<span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// In memory store (for demo)</span>
<span class="token keyword">let</span> todos<span class="token operator">:</span> Todo<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> text<span class="token operator">:</span> <span class="token string">"Buy milk"</span><span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> getTodos <span class="token operator">=</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> todos<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> addTodo <span class="token operator">=</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">const</span> newTodo<span class="token operator">:</span> Todo <span class="token operator">=</span> <span class="token punctuation">&#123;</span> id<span class="token operator">:</span> crypto<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  todos <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token operator">...</span>todos<span class="token punctuation">,</span> newTodo <span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> newTodo<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> toggleTodo <span class="token operator">=</span> <span class="token function">command</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  todos <span class="token operator">=</span> todos<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">=></span>
    t<span class="token punctuation">.</span>id <span class="token operator">===</span> id <span class="token operator">?</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>t<span class="token punctuation">,</span> done<span class="token operator">:</span> <span class="token operator">!</span>t<span class="token punctuation">.</span>done <span class="token punctuation">&#125;</span> <span class="token operator">:</span> t
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`),i(w);var _=c(w,4),$=l(_);u($,()=>`<code class="language-svelte"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">import</span> <span class="token punctuation">&#123;</span> getTodos<span class="token punctuation">,</span> addTodo<span class="token punctuation">,</span> toggleTodo <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./todos.remote'</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> todos <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleAdd</span><span class="token punctuation">(</span><span class="token parameter">event<span class="token operator">:</span> SubmitEvent</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    event<span class="token punctuation">.</span><span class="token function">preventDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> form <span class="token operator">=</span> event<span class="token punctuation">.</span>currentTarget <span class="token keyword">as</span> HTMLFormElement<span class="token punctuation">;</span>
    <span class="token keyword">const</span> text <span class="token operator">=</span> <span class="token punctuation">(</span>form<span class="token punctuation">.</span>elements<span class="token punctuation">.</span><span class="token function">namedItem</span><span class="token punctuation">(</span><span class="token string">'text'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> HTMLInputElement<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>
    <span class="token keyword">await</span> <span class="token function">addTodo</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updates</span><span class="token punctuation">(</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handleToggle</span><span class="token punctuation">(</span><span class="token parameter">id<span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">await</span> <span class="token function">toggleTodo</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updates</span><span class="token punctuation">(</span><span class="token function">getTodos</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">on:</span>submit=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>handleAdd<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Add<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">#each</span> <span class="token language-javascript">todos </span><span class="token keyword">as</span> <span class="token language-javascript">t<span class="token punctuation">&#125;</span></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>
          <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span>
          <span class="token attr-name">checked=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span>done<span class="token punctuation">&#125;</span></span>
          <span class="token attr-name"><span class="token namespace">on:</span>change=</span><span class="token language-javascript"><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">handleToggle</span><span class="token punctuation">(</span>t<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>
        <span class="token language-javascript"><span class="token punctuation">&#123;</span>t<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
  <span class="token each"><span class="token punctuation">&#123;</span><span class="token keyword">/each</span><span class="token punctuation">&#125;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></code>`),i(_),D(60),b(t,n)}const on=Object.freeze(Object.defineProperty({__proto__:null,default:en,metadata:F},Symbol.toStringTag,{value:"Module"}));async function In(){const t=Object.assign({"/src/content/blog/react-future-nextjs-shadow.svx":an,"/src/content/blog/remote-function-sveltekit.svx":on}),n=[];for(const[s,e]of Object.entries(t)){const m=s.split("/").pop()?.replace(".svx","")||"",p=e;p.metadata&&n.push({slug:m,metadata:p.metadata,component:p.default})}return n.sort((s,e)=>new Date(e.metadata.date).getTime()-new Date(s.metadata.date).getTime())}function Dn(t){return new Date(t).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})}export{rn as C,Dn as f,In as l};
